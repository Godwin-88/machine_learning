# -*- coding: utf-8 -*-
"""Performance_Prediction_of_Students.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sGMcpCmlnkxYvxhHzLDQfgKoMMrH2laK
"""

pip install vizro

from vizro import Vizro
import vizro.models as vm
import vizro.plotly.express as px
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np
from vizro import Vizro
import vizro.models as vm

# Standard ML Models for comparison
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import ElasticNet
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.svm import SVR

# Splitting data into training/testing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# Metrics
from sklearn.metrics import mean_squared_error, mean_absolute_error, median_absolute_error

# Distributions
import scipy

"""# New Section"""

student = pd.read_csv("C://Users//HP 430 G3//Downloads//student-mat.csv")
student.head()

"""**1. Exploratory Data Analysis**"""

#number of students
print('Total number of students:',len(student))

"""*Summary of Final Grade*"""

student['G3'].describe()

plt.subplots(figsize=(8,12))
grade_counts = student['G3'].value_counts().sort_values().plot.barh(width=.9,color=sns.color_palette('hls',40))
grade_counts.axes.set_title('How many students scored a particular grade?',fontsize=30)
grade_counts.set_xlabel('Number of students', fontsize=30)
grade_counts.set_ylabel('Final Grade', fontsize=30)
plt.show()

"""From the plot above the students appear to be average peformers since the modal grade is 10 which is between 0 the minimum and 20 the maximum. The finding is consisntent with the average grade which is found to be 10. The comprehensive visualization of teh grade distribution will  be achieved using a histogram."""

b = sns.histplot(student['G3'])
b.axes.set_title('Distribution of Final grade of students', fontsize = 30)
b.set_xlabel('Final Grade', fontsize = 20)
b.set_ylabel('Count', fontsize = 20)
plt.show()

student.isnull().any()

import vizro.plotly.express as px
from vizro import Vizro
import vizro.models as vm

df = px.data.iris()

page = vm.Page(
    title="My first dashboard",
    components=[
        vm.Graph(id="scatter_chart", figure=px.scatter(df, x="sepal_length", y="petal_width", color="species")),
        vm.Graph(id="hist_chart", figure=px.histogram(df, x="sepal_width", color="species")),
    ],
    controls=[
        vm.Filter(column="species", selector=vm.Dropdown(value=["ALL"])),
    ],
)

dashboard = vm.Dashboard(pages=[page])

Vizro().build(dashboard).run()

male_studs = len(student[student['sex'] == 'M'])
female_studs = len(student[student['sex'] == 'F'])
print('Number of male students:',male_studs)
print('Number of female students:',female_studs)

b = sns.kdeplot(student['age'], shade=True)
b.axes.set_title('Ages of students', fontsize = 30)
b.set_xlabel('Age', fontsize = 20)
b.set_ylabel('Count', fontsize = 20)
plt.show()

b = sns.boxplot(x='age', y='G3', data=student)
b.axes.set_title('Age vs Final', fontsize = 30)
b.set_xlabel('Age', fontsize = 20)
b.set_ylabel('Final Grade', fontsize = 20)
plt.show()

b = sns.swarmplot(x='age', y='G3',hue='sex', data=student)
b.axes.set_title('Does age affect final grade?', fontsize = 30)
b.set_xlabel('Age', fontsize = 20)
b.set_ylabel('Final Grade', fontsize = 20)
plt.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='address', title='Urban and Rural Students')

# Customize the layout
fig.update_layout(
    xaxis_title='Address',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='school', title='School')

# Customize the layout
fig.update_layout(
    xaxis_title='School',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='sex', title='Gender')

# Customize the layout
fig.update_layout(
    xaxis_title='Gender',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='age', title='Age of Students')

# Customize the layout
fig.update_layout(
    xaxis_title='Age',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='famsize', title='Family Size')

# Customize the layout
fig.update_layout(
    xaxis_title='Family Size',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Pstatus', title='Pstatus')

# Customize the layout
fig.update_layout(
    xaxis_title='Pstatus',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Medu', title='Maternal Education Status')

# Customize the layout
fig.update_layout(
    xaxis_title='Maternal Education Status',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Fedu', title='Fedu')

# Customize the layout
fig.update_layout(
    xaxis_title='Fedu',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Mjob', title='job of mother')

# Customize the layout
fig.update_layout(
    xaxis_title='Job of mother',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Fjob', title='Job of Father')

# Customize the layout
fig.update_layout(
    xaxis_title='Job of Father',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='reason', title='reason for performance')

# Customize the layout
fig.update_layout(
    xaxis_title='reason',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='guardian', title='presence of a guardian')

# Customize the layout
fig.update_layout(
    xaxis_title='guardian',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='internet', title='Internet connectivity')

# Customize the layout
fig.update_layout(
    xaxis_title='internet',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='traveltime', title='Time spent commuting to school')

# Customize the layout
fig.update_layout(
    xaxis_title='Travel Time',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='studytime', title='Time spent studying')

# Customize the layout
fig.update_layout(
    xaxis_title='studytime',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='failures', title='failures')

# Customize the layout
fig.update_layout(
    xaxis_title='failures',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='schoolsup', title='support from school')

# Customize the layout
fig.update_layout(
    xaxis_title='School Support',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='famsup', title='family support')

# Customize the layout
fig.update_layout(
    xaxis_title='Family Support',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='absences', title='Number of absences')

# Customize the layout
fig.update_layout(
    xaxis_title='Absences',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='G1', title='First Grade')

# Customize the layout
fig.update_layout(
    xaxis_title='First Grade',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='G2', title='Second Grade')

# Customize the layout
fig.update_layout(
    xaxis_title='Second Grade',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='G3', title='Grade')

# Customize the layout
fig.update_layout(
    xaxis_title='Grade',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Dalc', title='Daily alcohol consumption')

# Customize the layout
fig.update_layout(
    xaxis_title='Dalc',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Walc', title='Weekly alcohol consumption')

# Customize the layout
fig.update_layout(
    xaxis_title='Walc',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot

import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='activities', title='Activities participation')

# Customize the layout
fig.update_layout(
    xaxis_title='activities',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot



import plotly.express as px

# Assuming 'student' is your DataFrame and 'address' is a column in it
# Make sure you've imported and loaded the data correctly before using it

# Create a countplot using Plotly Express
fig = px.histogram(student, x='Walc', title='Weekly alcohol consumption')

# Customize the layout
fig.update_layout(
    xaxis_title='Walc',
    yaxis_title='Count',
    font=dict(size=20)  # Adjust font size for title and labels
)

# Show the plot

import plotly.express as px
import pandas as pd
import numpy as np


# Create the scatter plot with different colors for each gender
fig = px.scatter(
    student, x='absences', y='G3', color='sex',
    title='Scatter Plot of absences and Score by Gender'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Absences',
    yaxis_title='Grade',
    showlegend=True,
    legend_title='Gender'
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd
import numpy as np


# Create the scatter plot with different colors for each gender
fig = px.scatter(
    student, x='age', y='G3', color='sex',
    title='Scatter Plot of Age and Score by Gender'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='age',
    yaxis_title='Grade',
    showlegend=True,
    legend_title='Gender'
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='sex', y='G3',
    title='Box Plot of Grade by Gender'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Gender',
    yaxis_title='Grade',
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='address', y='G3',
    title='Box Plot of Grade by address'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Address',
    yaxis_title='Grade',
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='famsize', y='G3',
    title='Box Plot of Grade by Family Size'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Family Size',
    yaxis_title='Grade',
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='Medu', y='G3',
    title='Box Plot of Grade by Maternal Education Status'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Maternal Education Status',
    yaxis_title='Grade',
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='Fedu', y='G3',
    title='Box Plot of Grade by Paternal Education Status'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Paternal Education Status',
    yaxis_title='Grade',
)

# Show the plot
fig.show()



import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='studytime', y='G3',
    title='Box Plot of Grade by Study time'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='study time',
    yaxis_title='Grade',
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='traveltime', y='G3',
    title='Box Plot of Grade by travel time'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Travel time',
    yaxis_title='Grade',
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Create a box plot
fig = px.box(
    df, x='address', y='G3',
    title='Box Plot of Grade by address'
)

# Customize the layout (optional)
fig.update_layout(
    xaxis_title='Address',
    yaxis_title='Grade',
)

# Show the plot
fig.show()

# Grade distribution by address
sns.kdeplot(student.loc[student['address'] == 'U', 'G3'], label='Urban', shade = True)
sns.kdeplot(student.loc[student['address'] == 'R', 'G3'], label='Rural', shade = True)
plt.title('Do urban students score higher than rural students?', fontsize = 20)
plt.xlabel('Grade', fontsize = 20);
plt.ylabel('Density', fontsize = 20)
plt.show()

b = sns.swarmplot(x='reason', y='G3', data=student)
b.axes.set_title('Reason vs Final grade', fontsize = 30)
b.set_xlabel('Reason', fontsize = 20)
b.set_ylabel('Final Grade', fontsize = 20)
plt.show()

student.corr()['G3'].sort_values()

"""Encoding"""

# Select only categorical variables
category_df = student.select_dtypes(include=['object'])

# One hot encode the variables
dummy_df = pd.get_dummies(category_df)
dummy_df

# Put the grade back in the dataframe
dummy_df['G3'] = student['G3']
dummy_df.head()

# Find correlations with grade
dummy_df.corr()['G3'].sort_values()

# selecting the most correlated values and dropping the others
labels = student['G3']

# drop the school and grade columns
student = student.drop(['school', 'G1', 'G2'], axis='columns')
student.head()

# One-Hot Encoding of Categorical Variables
student = pd.get_dummies(student)
student.head()

# Find correlations with the Grade
most_correlated = student.corr().abs()['G3'].sort_values(ascending=False)

# Maintain the top 8 most correlation features with Grade
most_correlated = most_correlated[:9]
most_correlated

student = student.loc[:, most_correlated.index]
student.head()

b = sns.swarmplot(x=student['failures'],y=student['G3'])
b.axes.set_title('Students with less failures score higher', fontsize = 30)
b.set_xlabel('Number of failures', fontsize = 10)
b.set_ylabel('Final Grade', fontsize = 10)
plt.show()

family_ed = student['Fedu'] + student['Medu']
b = sns.boxplot(x=family_ed,y=student['G3'])
b.axes.set_title('Educated families result in higher grades', fontsize = 30)
b.set_xlabel('Family education (Mother + Father)', fontsize = 20)
b.set_ylabel('Final Grade', fontsize = 20)
plt.show()

b = sns.swarmplot(x=family_ed,y=student['G3'])
b.axes.set_title('Educated families result in higher grades', fontsize = 30)
b.set_xlabel('Family education (Mother + Father)', fontsize = 20)
b.set_ylabel('Final Grade', fontsize = 20)
plt.show()

b = sns.boxplot(x = student['higher_yes'], y=student['G3'])
b.axes.set_title('Students who wish to go for higher studies score more', fontsize = 30)
b.set_xlabel('Higher education (1 = Yes)', fontsize = 20)
b.set_ylabel('Final Grade', fontsize = 20)
plt.show()

b = sns.histplot(student['goout'])
b.axes.set_title('How often do students go out with friends', fontsize = 30)
b.set_xlabel('Go out', fontsize = 20)
b.set_ylabel('Count', fontsize = 20)
plt.show()

"""# Modeling

### We can create a model in 3 ways

1. Binary classification
    - G3 > 10: pass
    - G3 < 10: fail
2. 5-level classification based on Erasmus grade conversion system
    - 16-20: very good
    - 14-15: good
    - 12-13: satisfactory
    - 10-11: sufficient
    -  0-9 : fail
3. Regression (Predicting G3)

### We will be using the 3rd type
"""

# splitting the data into training and testing data (75% and 25%)
# we mention the random state to achieve the same split everytime we run the code
X_train, X_test, y_train, y_test = train_test_split(student, labels, test_size = 0.25, random_state=42)

X_train.head()

"""### MAE - Mean Absolute Error
### RMSE - Root Mean Square Error
"""

# Calculate mae and rmse
def evaluate_predictions(predictions, true):
    mae = np.mean(abs(predictions - true))
    rmse = np.sqrt(np.mean((predictions - true) ** 2))

    return mae, rmse

"""### Naive baseline is the median prediction"""

# find the median
median_pred = X_train['G3'].median()

# create a list with all values as median
median_preds = [median_pred for _ in range(len(X_test))]

# store the true G3 values for passing into the function
true = X_test['G3']

# Display the naive baseline metrics
mb_mae, mb_rmse = evaluate_predictions(median_preds, true)
print('Median Baseline  MAE: {:.4f}'.format(mb_mae))
print('Median Baseline RMSE: {:.4f}'.format(mb_rmse))

# Evaluate several ml models by training on training set and testing on testing set
def evaluate(X_train, X_test, y_train, y_test):
    # Names of models
    model_name_list = ['Linear Regression', 'ElasticNet Regression',
                      'Random Forest', 'Extra Trees', 'SVM',
                       'Gradient Boosted', 'Baseline']
    X_train = X_train.drop('G3', axis='columns')
    X_test = X_test.drop('G3', axis='columns')

    # Instantiate the models
    model1 = LinearRegression()
    model2 = ElasticNet(alpha=1.0, l1_ratio=0.5)
    model3 = RandomForestRegressor(n_estimators=100)
    model4 = ExtraTreesRegressor(n_estimators=100)
    model5 = SVR(kernel='rbf', degree=3, C=1.0, gamma='auto')
    model6 = GradientBoostingRegressor(n_estimators=50)

    # Dataframe for results
    results = pd.DataFrame(columns=['mae', 'rmse'], index = model_name_list)

    # Train and predict with each model
    for i, model in enumerate([model1, model2, model3, model4, model5, model6]):
        model.fit(X_train, y_train)
        predictions = model.predict(X_test)

        # Metrics
        mae = np.mean(abs(predictions - y_test))
        rmse = np.sqrt(np.mean((predictions - y_test) ** 2))

        # Insert results into the dataframe
        model_name = model_name_list[i]
        results.loc[model_name, :] = [mae, rmse]

    # Median Value Baseline Metrics
    baseline = np.median(y_train)
    baseline_mae = np.mean(abs(baseline - y_test))
    baseline_rmse = np.sqrt(np.mean((baseline - y_test) ** 2))

    results.loc['Baseline', :] = [baseline_mae, baseline_rmse]

    return results

results = evaluate(X_train, X_test, y_train, y_test)
results

plt.figure(figsize=(12, 8))

# Root mean squared error
ax =  plt.subplot(1, 2, 1)
results.sort_values('mae', ascending = True).plot.bar(y = 'mae', color = 'b', ax = ax, fontsize=20)
plt.title('Model Mean Absolute Error', fontsize=20)
plt.ylabel('MAE', fontsize=20)

# Median absolute percentage error
ax = plt.subplot(1, 2, 2)
results.sort_values('rmse', ascending = True).plot.bar(y = 'rmse', color = 'r', ax = ax, fontsize=20)
plt.title('Model Root Mean Squared Error', fontsize=20)
plt.ylabel('RMSE',fontsize=20)

plt.show()